{"ast":null,"code":"var util = require('./util');\n\nvar EncodingTable = require('./encoding-table');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty; // Alternate character when can't detect\n\nexports.UNKNOWN_CHARACTER = 63; // '?'\n\nvar HAS_TYPED = exports.HAS_TYPED = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined'; // Test for String.fromCharCode.apply\n\nvar CAN_CHARCODE_APPLY = false;\nvar CAN_CHARCODE_APPLY_TYPED = false;\n\ntry {\n  if (String.fromCharCode.apply(null, [0x61]) === 'a') {\n    CAN_CHARCODE_APPLY = true;\n  }\n} catch (e) {}\n\nif (HAS_TYPED) {\n  try {\n    if (String.fromCharCode.apply(null, new Uint8Array([0x61])) === 'a') {\n      CAN_CHARCODE_APPLY_TYPED = true;\n    }\n  } catch (e) {}\n}\n\nexports.CAN_CHARCODE_APPLY = CAN_CHARCODE_APPLY;\nexports.CAN_CHARCODE_APPLY_TYPED = CAN_CHARCODE_APPLY_TYPED; // Function.prototype.apply stack max range\n\nexports.APPLY_BUFFER_SIZE = 65533;\nexports.APPLY_BUFFER_SIZE_OK = null;\nvar EncodingNames = exports.EncodingNames = {\n  UTF32: {\n    order: 0\n  },\n  UTF32BE: {\n    alias: ['UCS4']\n  },\n  UTF32LE: null,\n  UTF16: {\n    order: 1\n  },\n  UTF16BE: {\n    alias: ['UCS2']\n  },\n  UTF16LE: null,\n  BINARY: {\n    order: 2\n  },\n  ASCII: {\n    order: 3,\n    alias: ['ISO646', 'CP367']\n  },\n  JIS: {\n    order: 4,\n    alias: ['ISO2022JP']\n  },\n  UTF8: {\n    order: 5\n  },\n  EUCJP: {\n    order: 6\n  },\n  SJIS: {\n    order: 7,\n    alias: ['CP932', 'MSKANJI', 'WINDOWS31J']\n  },\n  UNICODE: {\n    order: 8\n  }\n};\nvar EncodingAliases = {};\n\nexports.EncodingOrders = function () {\n  var aliases = EncodingAliases;\n  var names = util.getKeys(EncodingNames);\n  var orders = [];\n  var name, encoding, j, l;\n\n  for (var i = 0, len = names.length; i < len; i++) {\n    name = names[i];\n    aliases[name] = name;\n    encoding = EncodingNames[name];\n\n    if (encoding != null) {\n      if (typeof encoding.order !== 'undefined') {\n        orders[orders.length] = name;\n      }\n\n      if (encoding.alias) {\n        // Create encoding aliases\n        for (j = 0, l = encoding.alias.length; j < l; j++) {\n          aliases[encoding.alias[j]] = name;\n        }\n      }\n    }\n  }\n\n  orders.sort(function (a, b) {\n    return EncodingNames[a].order - EncodingNames[b].order;\n  });\n  return orders;\n}();\n\nfunction init_JIS_TO_UTF8_TABLE() {\n  if (EncodingTable.JIS_TO_UTF8_TABLE === null) {\n    EncodingTable.JIS_TO_UTF8_TABLE = {};\n    var keys = util.getKeys(EncodingTable.UTF8_TO_JIS_TABLE);\n    var i = 0;\n    var len = keys.length;\n    var key, value;\n\n    for (; i < len; i++) {\n      key = keys[i];\n      value = EncodingTable.UTF8_TO_JIS_TABLE[key];\n\n      if (value > 0x5F) {\n        EncodingTable.JIS_TO_UTF8_TABLE[value] = key | 0;\n      }\n    }\n\n    EncodingTable.JISX0212_TO_UTF8_TABLE = {};\n    keys = util.getKeys(EncodingTable.UTF8_TO_JISX0212_TABLE);\n    len = keys.length;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      value = EncodingTable.UTF8_TO_JISX0212_TABLE[key];\n      EncodingTable.JISX0212_TO_UTF8_TABLE[value] = key | 0;\n    }\n  }\n}\n\nexports.init_JIS_TO_UTF8_TABLE = init_JIS_TO_UTF8_TABLE;\n/**\n * Assign the internal encoding name from the argument encoding name\n */\n\nfunction assignEncodingName(target) {\n  var name = '';\n  var expect = ('' + target).toUpperCase().replace(/[^A-Z0-9]+/g, '');\n  var aliasNames = util.getKeys(EncodingAliases);\n  var len = aliasNames.length;\n  var hit = 0;\n  var encoding, encodingLen, j;\n\n  for (var i = 0; i < len; i++) {\n    encoding = aliasNames[i];\n\n    if (encoding === expect) {\n      name = encoding;\n      break;\n    }\n\n    encodingLen = encoding.length;\n\n    for (j = hit; j < encodingLen; j++) {\n      if (encoding.slice(0, j) === expect.slice(0, j) || encoding.slice(-j) === expect.slice(-j)) {\n        name = encoding;\n        hit = j;\n      }\n    }\n  }\n\n  if (hasOwnProperty.call(EncodingAliases, name)) {\n    return EncodingAliases[name];\n  }\n\n  return name;\n}\n\nexports.assignEncodingName = assignEncodingName;","map":null,"metadata":{},"sourceType":"module"}