{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport { mergeData } from 'vue-functional-data-merge';\nimport { getComponentConfig } from '../../utils/config';\nimport { stripTags } from '../../utils/html';\nimport { hasNormalizedSlot, normalizeSlot } from '../../utils/normalize-slot';\nimport { BContainer } from '../layout/container';\nvar NAME = 'BJumbotron';\nexport var props = {\n  fluid: {\n    type: Boolean,\n    \"default\": false\n  },\n  containerFluid: {\n    type: Boolean,\n    \"default\": false\n  },\n  header: {\n    type: String,\n    \"default\": null\n  },\n  headerHtml: {\n    type: String,\n    \"default\": null\n  },\n  headerTag: {\n    type: String,\n    \"default\": 'h1'\n  },\n  headerLevel: {\n    type: [Number, String],\n    \"default\": '3'\n  },\n  lead: {\n    type: String,\n    \"default\": null\n  },\n  leadHtml: {\n    type: String,\n    \"default\": null\n  },\n  leadTag: {\n    type: String,\n    \"default\": 'p'\n  },\n  tag: {\n    type: String,\n    \"default\": 'div'\n  },\n  bgVariant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'bgVariant');\n    }\n  },\n  borderVariant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'borderVariant');\n    }\n  },\n  textVariant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'textVariant');\n    }\n  }\n}; // @vue/component\n\nexport var BJumbotron =\n/*#__PURE__*/\nVue.extend({\n  name: NAME,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var _class2;\n\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots; // The order of the conditionals matter.\n    // We are building the component markup in order.\n\n    var childNodes = [];\n    var $slots = slots();\n    var $scopedSlots = scopedSlots || {}; // Header\n\n    if (props.header || hasNormalizedSlot('header', $scopedSlots, $slots) || props.headerHtml) {\n      childNodes.push(h(props.headerTag, {\n        \"class\": _defineProperty({}, \"display-\".concat(props.headerLevel), Boolean(props.headerLevel))\n      }, normalizeSlot('header', {}, $scopedSlots, $slots) || props.headerHtml || stripTags(props.header)));\n    } // Lead\n\n\n    if (props.lead || hasNormalizedSlot('lead', $scopedSlots, $slots) || props.leadHtml) {\n      childNodes.push(h(props.leadTag, {\n        staticClass: 'lead'\n      }, normalizeSlot('lead', {}, $scopedSlots, $slots) || props.leadHtml || stripTags(props.lead)));\n    } // Default slot\n\n\n    if (hasNormalizedSlot('default', $scopedSlots, $slots)) {\n      childNodes.push(normalizeSlot('default', {}, $scopedSlots, $slots));\n    } // If fluid, wrap content in a container/container-fluid\n\n\n    if (props.fluid) {\n      // Children become a child of a container\n      childNodes = [h(BContainer, {\n        props: {\n          fluid: props.containerFluid\n        }\n      }, childNodes)];\n    } // Return the jumbotron\n\n\n    return h(props.tag, mergeData(data, {\n      staticClass: 'jumbotron',\n      \"class\": (_class2 = {\n        'jumbotron-fluid': props.fluid\n      }, _defineProperty(_class2, \"text-\".concat(props.textVariant), Boolean(props.textVariant)), _defineProperty(_class2, \"bg-\".concat(props.bgVariant), Boolean(props.bgVariant)), _defineProperty(_class2, \"border-\".concat(props.borderVariant), Boolean(props.borderVariant)), _defineProperty(_class2, \"border\", Boolean(props.borderVariant)), _class2)\n    }), childNodes);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}