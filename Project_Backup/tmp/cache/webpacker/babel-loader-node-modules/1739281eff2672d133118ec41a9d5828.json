{"ast":null,"code":"import { isArray, isObject } from './inspect';\n/**\n * Get property defined by dot/array notation in string.\n *\n * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901\n *\n * @param {Object} obj\n * @param {string|Array} path\n * @param {*} defaultValue (optional)\n * @return {*}\n */\n\nvar get = function get(obj, path) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null; // Handle array of path values\n\n  path = isArray(path) ? path.join('.') : path; // If no path or no object passed\n\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  } // Handle edge case where user has dot(s) in top-level item field key\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  if (path in obj) {\n    return obj[path];\n  } // Handle string array notation (numeric indices only)\n\n\n  path = String(path).replace(/\\[(\\d+)]/g, '.$1');\n  var steps = path.split('.').filter(Boolean); // Handle case where someone passes a string of only dots\n\n  if (steps.length === 0) {\n    return defaultValue;\n  } // Traverse path in object to find result\n  // We use `!=` vs `!==` to test for both `null` and `undefined`\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  return steps.every(function (step) {\n    return isObject(obj) && step in obj && (obj = obj[step]) != null;\n  }) ? obj : defaultValue;\n};\n\nexport default get;","map":null,"metadata":{},"sourceType":"module"}