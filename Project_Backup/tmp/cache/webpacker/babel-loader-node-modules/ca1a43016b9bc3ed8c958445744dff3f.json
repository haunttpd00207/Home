{"ast":null,"code":"/**\n * Binary (exe, images and so, etc.)\n *\n * Note:\n *   This function is not considered for Unicode\n */\nfunction isBINARY(data) {\n  var i = 0;\n  var len = data && data.length;\n  var c;\n\n  for (; i < len; i++) {\n    c = data[i];\n\n    if (c > 0xFF) {\n      return false;\n    }\n\n    if (c >= 0x00 && c <= 0x07 || c === 0xFF) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.isBINARY = isBINARY;\n/**\n * ASCII (ISO-646)\n */\n\nfunction isASCII(data) {\n  var i = 0;\n  var len = data && data.length;\n  var b;\n\n  for (; i < len; i++) {\n    b = data[i];\n\n    if (b > 0xFF || b >= 0x80 && b <= 0xFF || b === 0x1B) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isASCII = isASCII;\n/**\n * ISO-2022-JP (JIS)\n *\n * RFC1468 Japanese Character Encoding for Internet Messages\n * RFC1554 ISO-2022-JP-2: Multilingual Extension of ISO-2022-JP\n * RFC2237 Japanese Character Encoding for Internet Messages\n */\n\nfunction isJIS(data) {\n  var i = 0;\n  var len = data && data.length;\n  var b, esc1, esc2;\n\n  for (; i < len; i++) {\n    b = data[i];\n\n    if (b > 0xFF || b >= 0x80 && b <= 0xFF) {\n      return false;\n    }\n\n    if (b === 0x1B) {\n      if (i + 2 >= len) {\n        return false;\n      }\n\n      esc1 = data[i + 1];\n      esc2 = data[i + 2];\n\n      if (esc1 === 0x24) {\n        if (esc2 === 0x28 || // JIS X 0208-1990/2000/2004\n        esc2 === 0x40 || // JIS X 0208-1978\n        esc2 === 0x42) {\n          // JIS X 0208-1983\n          return true;\n        }\n      } else if (esc1 === 0x26 && // JIS X 0208-1990\n      esc2 === 0x40) {\n        return true;\n      } else if (esc1 === 0x28) {\n        if (esc2 === 0x42 || // ASCII\n        esc2 === 0x49 || // JIS X 0201 Halfwidth Katakana\n        esc2 === 0x4A) {\n          // JIS X 0201-1976 Roman set\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nexports.isJIS = isJIS;\n/**\n * EUC-JP\n */\n\nfunction isEUCJP(data) {\n  var i = 0;\n  var len = data && data.length;\n  var b;\n\n  for (; i < len; i++) {\n    b = data[i];\n\n    if (b < 0x80) {\n      continue;\n    }\n\n    if (b > 0xFF || b < 0x8E) {\n      return false;\n    }\n\n    if (b === 0x8E) {\n      if (i + 1 >= len) {\n        return false;\n      }\n\n      b = data[++i];\n\n      if (b < 0xA1 || 0xDF < b) {\n        return false;\n      }\n    } else if (b === 0x8F) {\n      if (i + 2 >= len) {\n        return false;\n      }\n\n      b = data[++i];\n\n      if (b < 0xA2 || 0xED < b) {\n        return false;\n      }\n\n      b = data[++i];\n\n      if (b < 0xA1 || 0xFE < b) {\n        return false;\n      }\n    } else if (0xA1 <= b && b <= 0xFE) {\n      if (i + 1 >= len) {\n        return false;\n      }\n\n      b = data[++i];\n\n      if (b < 0xA1 || 0xFE < b) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isEUCJP = isEUCJP;\n/**\n * Shift-JIS (SJIS)\n */\n\nfunction isSJIS(data) {\n  var i = 0;\n  var len = data && data.length;\n  var b;\n\n  while (i < len && data[i] > 0x80) {\n    if (data[i++] > 0xFF) {\n      return false;\n    }\n  }\n\n  for (; i < len; i++) {\n    b = data[i];\n\n    if (b <= 0x80 || 0xA1 <= b && b <= 0xDF) {\n      continue;\n    }\n\n    if (b === 0xA0 || b > 0xEF || i + 1 >= len) {\n      return false;\n    }\n\n    b = data[++i];\n\n    if (b < 0x40 || b === 0x7F || b > 0xFC) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isSJIS = isSJIS;\n/**\n * UTF-8\n */\n\nfunction isUTF8(data) {\n  var i = 0;\n  var len = data && data.length;\n  var b;\n\n  for (; i < len; i++) {\n    b = data[i];\n\n    if (b > 0xFF) {\n      return false;\n    }\n\n    if (b === 0x09 || b === 0x0A || b === 0x0D || b >= 0x20 && b <= 0x7E) {\n      continue;\n    }\n\n    if (b >= 0xC2 && b <= 0xDF) {\n      if (i + 1 >= len || data[i + 1] < 0x80 || data[i + 1] > 0xBF) {\n        return false;\n      }\n\n      i++;\n    } else if (b === 0xE0) {\n      if (i + 2 >= len || data[i + 1] < 0xA0 || data[i + 1] > 0xBF || data[i + 2] < 0x80 || data[i + 2] > 0xBF) {\n        return false;\n      }\n\n      i += 2;\n    } else if (b >= 0xE1 && b <= 0xEC || b === 0xEE || b === 0xEF) {\n      if (i + 2 >= len || data[i + 1] < 0x80 || data[i + 1] > 0xBF || data[i + 2] < 0x80 || data[i + 2] > 0xBF) {\n        return false;\n      }\n\n      i += 2;\n    } else if (b === 0xED) {\n      if (i + 2 >= len || data[i + 1] < 0x80 || data[i + 1] > 0x9F || data[i + 2] < 0x80 || data[i + 2] > 0xBF) {\n        return false;\n      }\n\n      i += 2;\n    } else if (b === 0xF0) {\n      if (i + 3 >= len || data[i + 1] < 0x90 || data[i + 1] > 0xBF || data[i + 2] < 0x80 || data[i + 2] > 0xBF || data[i + 3] < 0x80 || data[i + 3] > 0xBF) {\n        return false;\n      }\n\n      i += 3;\n    } else if (b >= 0xF1 && b <= 0xF3) {\n      if (i + 3 >= len || data[i + 1] < 0x80 || data[i + 1] > 0xBF || data[i + 2] < 0x80 || data[i + 2] > 0xBF || data[i + 3] < 0x80 || data[i + 3] > 0xBF) {\n        return false;\n      }\n\n      i += 3;\n    } else if (b === 0xF4) {\n      if (i + 3 >= len || data[i + 1] < 0x80 || data[i + 1] > 0x8F || data[i + 2] < 0x80 || data[i + 2] > 0xBF || data[i + 3] < 0x80 || data[i + 3] > 0xBF) {\n        return false;\n      }\n\n      i += 3;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isUTF8 = isUTF8;\n/**\n * UTF-16 (LE or BE)\n *\n * RFC2781: UTF-16, an encoding of ISO 10646\n *\n * @link http://www.ietf.org/rfc/rfc2781.txt\n */\n\nfunction isUTF16(data) {\n  var i = 0;\n  var len = data && data.length;\n  var pos = null;\n  var b1, b2, next, prev;\n\n  if (len < 2) {\n    if (data[0] > 0xFF) {\n      return false;\n    }\n  } else {\n    b1 = data[0];\n    b2 = data[1];\n\n    if (b1 === 0xFF && // BOM (little-endian)\n    b2 === 0xFE) {\n      return true;\n    }\n\n    if (b1 === 0xFE && // BOM (big-endian)\n    b2 === 0xFF) {\n      return true;\n    }\n\n    for (; i < len; i++) {\n      if (data[i] === 0x00) {\n        pos = i;\n        break;\n      } else if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n\n    if (pos === null) {\n      return false; // Non ASCII\n    }\n\n    next = data[pos + 1]; // BE\n\n    if (next !== void 0 && next > 0x00 && next < 0x80) {\n      return true;\n    }\n\n    prev = data[pos - 1]; // LE\n\n    if (prev !== void 0 && prev > 0x00 && prev < 0x80) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.isUTF16 = isUTF16;\n/**\n * UTF-16BE (big-endian)\n *\n * RFC 2781 4.3 Interpreting text labelled as UTF-16\n * Text labelled \"UTF-16BE\" can always be interpreted as being big-endian\n *  when BOM does not founds (SHOULD)\n *\n * @link http://www.ietf.org/rfc/rfc2781.txt\n */\n\nfunction isUTF16BE(data) {\n  var i = 0;\n  var len = data && data.length;\n  var pos = null;\n  var b1, b2;\n\n  if (len < 2) {\n    if (data[0] > 0xFF) {\n      return false;\n    }\n  } else {\n    b1 = data[0];\n    b2 = data[1];\n\n    if (b1 === 0xFE && // BOM\n    b2 === 0xFF) {\n      return true;\n    }\n\n    for (; i < len; i++) {\n      if (data[i] === 0x00) {\n        pos = i;\n        break;\n      } else if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n\n    if (pos === null) {\n      return false; // Non ASCII\n    }\n\n    if (pos % 2 === 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.isUTF16BE = isUTF16BE;\n/**\n * UTF-16LE (little-endian)\n */\n\nfunction isUTF16LE(data) {\n  var i = 0;\n  var len = data && data.length;\n  var pos = null;\n  var b1, b2;\n\n  if (len < 2) {\n    if (data[0] > 0xFF) {\n      return false;\n    }\n  } else {\n    b1 = data[0];\n    b2 = data[1];\n\n    if (b1 === 0xFF && // BOM\n    b2 === 0xFE) {\n      return true;\n    }\n\n    for (; i < len; i++) {\n      if (data[i] === 0x00) {\n        pos = i;\n        break;\n      } else if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n\n    if (pos === null) {\n      return false; // Non ASCII\n    }\n\n    if (pos % 2 !== 0) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.isUTF16LE = isUTF16LE;\n/**\n * UTF-32\n *\n * Unicode 3.2.0: Unicode Standard Annex #19\n *\n * @link http://www.iana.org/assignments/charset-reg/UTF-32\n * @link http://www.unicode.org/reports/tr19/tr19-9.html\n */\n\nfunction isUTF32(data) {\n  var i = 0;\n  var len = data && data.length;\n  var pos = null;\n  var b1, b2, b3, b4;\n  var next, prev;\n\n  if (len < 4) {\n    for (; i < len; i++) {\n      if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n  } else {\n    b1 = data[0];\n    b2 = data[1];\n    b3 = data[2];\n    b4 = data[3];\n\n    if (b1 === 0x00 && b2 === 0x00 && // BOM (big-endian)\n    b3 === 0xFE && b4 === 0xFF) {\n      return true;\n    }\n\n    if (b1 === 0xFF && b2 === 0xFE && // BOM (little-endian)\n    b3 === 0x00 && b4 === 0x00) {\n      return true;\n    }\n\n    for (; i < len; i++) {\n      if (data[i] === 0x00 && data[i + 1] === 0x00 && data[i + 2] === 0x00) {\n        pos = i;\n        break;\n      } else if (data[i] > 0xFF) {\n        return false;\n      }\n    }\n\n    if (pos === null) {\n      return false;\n    } // The byte order should be the big-endian when BOM is not detected.\n\n\n    next = data[pos + 3];\n\n    if (next !== void 0 && next > 0x00 && next <= 0x7F) {\n      // big-endian\n      return data[pos + 2] === 0x00 && data[pos + 1] === 0x00;\n    }\n\n    prev = data[pos - 1];\n\n    if (prev !== void 0 && prev > 0x00 && prev <= 0x7F) {\n      // little-endian\n      return data[pos + 1] === 0x00 && data[pos + 2] === 0x00;\n    }\n  }\n\n  return false;\n}\n\nexports.isUTF32 = isUTF32;\n/**\n * JavaScript Unicode array\n */\n\nfunction isUNICODE(data) {\n  var i = 0;\n  var len = data && data.length;\n  var c;\n\n  for (; i < len; i++) {\n    c = data[i];\n\n    if (c < 0 || c > 0x10FFFF) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.isUNICODE = isUNICODE;","map":null,"metadata":{},"sourceType":"module"}